// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_beta_cpp
arma::vec compute_beta_cpp(arma::vec& b, arma::vec& m, arma::vec& l, arma::vec& grid, int p, int K, std::string basis, arma::mat& normalization_values);
RcppExport SEXP _bliss_compute_beta_cpp(SEXP bSEXP, SEXP mSEXP, SEXP lSEXP, SEXP gridSEXP, SEXP pSEXP, SEXP KSEXP, SEXP basisSEXP, SEXP normalization_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l(lSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::string >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type normalization_values(normalization_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_beta_cpp(b, m, l, grid, p, K, basis, normalization_values));
    return rcpp_result_gen;
END_RCPP
}
// compute_beta_sample_cpp
arma::mat compute_beta_sample_cpp(arma::mat& posterior_sample, int K, arma::vec& grid, int p, std::string& basis, arma::mat& normalization_values);
RcppExport SEXP _bliss_compute_beta_sample_cpp(SEXP posterior_sampleSEXP, SEXP KSEXP, SEXP gridSEXP, SEXP pSEXP, SEXP basisSEXP, SEXP normalization_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type posterior_sample(posterior_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type normalization_values(normalization_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_beta_sample_cpp(posterior_sample, K, grid, p, basis, normalization_values));
    return rcpp_result_gen;
END_RCPP
}
// moving_average_cpp
arma::vec moving_average_cpp(arma::vec& v, int range);
RcppExport SEXP _bliss_moving_average_cpp(SEXP vSEXP, SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_average_cpp(v, range));
    return rcpp_result_gen;
END_RCPP
}
// Bliss_Gibbs_Sampler_cpp
List Bliss_Gibbs_Sampler_cpp(int Q, arma::vec& y, List& x, List& grids, int iter, arma::vec& K, CharacterVector& basis, double g, double lambda, arma::mat& V_tilde, List& l_values, arma::vec& l_values_length, List& probs_l, bool progress, double tol);
RcppExport SEXP _bliss_Bliss_Gibbs_Sampler_cpp(SEXP QSEXP, SEXP ySEXP, SEXP xSEXP, SEXP gridsSEXP, SEXP iterSEXP, SEXP KSEXP, SEXP basisSEXP, SEXP gSEXP, SEXP lambdaSEXP, SEXP V_tildeSEXP, SEXP l_valuesSEXP, SEXP l_values_lengthSEXP, SEXP probs_lSEXP, SEXP progressSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< List& >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K(KSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V_tilde(V_tildeSEXP);
    Rcpp::traits::input_parameter< List& >::type l_values(l_valuesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l_values_length(l_values_lengthSEXP);
    Rcpp::traits::input_parameter< List& >::type probs_l(probs_lSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(Bliss_Gibbs_Sampler_cpp(Q, y, x, grids, iter, K, basis, g, lambda, V_tilde, l_values, l_values_length, probs_l, progress, tol));
    return rcpp_result_gen;
END_RCPP
}
// Bliss_Simulated_Annealing_cpp
List Bliss_Simulated_Annealing_cpp(int iter, arma::mat& beta_sample, arma::vec& grid, int burnin, double Temp, int k_max, int p_l, int dm, int dl, int p, std::string basis, arma::mat& normalization_values, bool progress, arma::mat& starting_point);
RcppExport SEXP _bliss_Bliss_Simulated_Annealing_cpp(SEXP iterSEXP, SEXP beta_sampleSEXP, SEXP gridSEXP, SEXP burninSEXP, SEXP TempSEXP, SEXP k_maxSEXP, SEXP p_lSEXP, SEXP dmSEXP, SEXP dlSEXP, SEXP pSEXP, SEXP basisSEXP, SEXP normalization_valuesSEXP, SEXP progressSEXP, SEXP starting_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_sample(beta_sampleSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type Temp(TempSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type p_l(p_lSEXP);
    Rcpp::traits::input_parameter< int >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< int >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type normalization_values(normalization_valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type starting_point(starting_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(Bliss_Simulated_Annealing_cpp(iter, beta_sample, grid, burnin, Temp, k_max, p_l, dm, dl, p, basis, normalization_values, progress, starting_point));
    return rcpp_result_gen;
END_RCPP
}
// dposterior_cpp
arma::mat dposterior_cpp(arma::mat& rposterior, arma::vec& y, unsigned N, arma::vec& K, List& potential_intervals, List& potential_intervals_dims, arma::vec& p_l, unsigned Q);
RcppExport SEXP _bliss_dposterior_cpp(SEXP rposteriorSEXP, SEXP ySEXP, SEXP NSEXP, SEXP KSEXP, SEXP potential_intervalsSEXP, SEXP potential_intervals_dimsSEXP, SEXP p_lSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type rposterior(rposteriorSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K(KSEXP);
    Rcpp::traits::input_parameter< List& >::type potential_intervals(potential_intervalsSEXP);
    Rcpp::traits::input_parameter< List& >::type potential_intervals_dims(potential_intervals_dimsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type p_l(p_lSEXP);
    Rcpp::traits::input_parameter< unsigned >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(dposterior_cpp(rposterior, y, N, K, potential_intervals, potential_intervals_dims, p_l, Q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bliss_compute_beta_cpp", (DL_FUNC) &_bliss_compute_beta_cpp, 8},
    {"_bliss_compute_beta_sample_cpp", (DL_FUNC) &_bliss_compute_beta_sample_cpp, 6},
    {"_bliss_moving_average_cpp", (DL_FUNC) &_bliss_moving_average_cpp, 2},
    {"_bliss_Bliss_Gibbs_Sampler_cpp", (DL_FUNC) &_bliss_Bliss_Gibbs_Sampler_cpp, 15},
    {"_bliss_Bliss_Simulated_Annealing_cpp", (DL_FUNC) &_bliss_Bliss_Simulated_Annealing_cpp, 14},
    {"_bliss_dposterior_cpp", (DL_FUNC) &_bliss_dposterior_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_bliss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
